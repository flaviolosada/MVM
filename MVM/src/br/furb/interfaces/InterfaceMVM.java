/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.furb.interfaces;

import br.furb.nucleo.MVM;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author flaviolosada
 */
public class InterfaceMVM extends javax.swing.JFrame {
    private MVM mattosMachine;
    /**
     * Creates new form InterfaceMVM
     */
    public InterfaceMVM() {
        initComponents();
        mattosMachine = new MVM();
        this.codigoFonteJTA.setBorder(new NumberedBorder());
        this.linhaJTF.setHorizontalAlignment(this.linhaJTF.RIGHT);
        startRelogio();
    }
    
    public void startRelogio() {
        final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                linhaJTF.setText(sdf.format(new Date()));
            }
        };
        new Timer().scheduleAtFixedRate(task, 0, 1000);
        try {
            wait();
        }
        catch (Exception ex)
        {}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fundoJP = new javax.swing.JPanel();
        ferramentaJTB = new javax.swing.JToolBar();
        carregarJB = new javax.swing.JButton();
        salvarJB = new javax.swing.JButton();
        executarJB = new javax.swing.JButton();
        codigoFonteJSP = new javax.swing.JScrollPane();
        codigoFonteJTA = new javax.swing.JTextArea();
        linhaJTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mattos Virtual Machine");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        fundoJP.setPreferredSize(new java.awt.Dimension(800, 600));
        fundoJP.setLayout(new java.awt.GridBagLayout());

        ferramentaJTB.setFloatable(false);
        ferramentaJTB.setRollover(true);
        ferramentaJTB.setPreferredSize(new java.awt.Dimension(100, 10));

        carregarJB.setText("Carregar");
        carregarJB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        carregarJB.setPreferredSize(new java.awt.Dimension(70, 35));
        carregarJB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        carregarJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carregarJBActionPerformed(evt);
            }
        });
        ferramentaJTB.add(carregarJB);

        salvarJB.setText("Salvar");
        salvarJB.setFocusable(false);
        salvarJB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        salvarJB.setPreferredSize(new java.awt.Dimension(70, 35));
        salvarJB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        salvarJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarJBActionPerformed(evt);
            }
        });
        ferramentaJTB.add(salvarJB);

        executarJB.setFocusable(false);
        executarJB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        executarJB.setLabel("Executar");
        executarJB.setPreferredSize(new java.awt.Dimension(70, 35));
        executarJB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        executarJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executarJBActionPerformed(evt);
            }
        });
        ferramentaJTB.add(executarJB);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        fundoJP.add(ferramentaJTB, gridBagConstraints);
        ferramentaJTB.getAccessibleContext().setAccessibleName("");

        codigoFonteJTA.setColumns(20);
        codigoFonteJTA.setRows(5);
        codigoFonteJSP.setViewportView(codigoFonteJTA);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 12;
        gridBagConstraints.gridheight = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.9;
        fundoJP.add(codigoFonteJSP, gridBagConstraints);

        linhaJTF.setEditable(false);
        linhaJTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        linhaJTF.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 1.0;
        fundoJP.add(linhaJTF, gridBagConstraints);

        getContentPane().add(fundoJP, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void carregarJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carregarJBActionPerformed
        JFileChooser abreArquivo = new JFileChooser();
        abreArquivo.setFileFilter(new ExtensionFileFilter());
        abreArquivo.setAcceptAllFileFilterUsed(false);
        abreArquivo.setDialogType(JFileChooser.OPEN_DIALOG);
        if (abreArquivo.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File arquivo = abreArquivo.getSelectedFile();
            try {
                BufferedReader bf = new BufferedReader(new FileReader(arquivo));
                StringBuilder conteudoArquivo = new StringBuilder();
                String linha = bf.readLine();
                while (linha != null) {
                    conteudoArquivo.append(linha).append("\n");
                    linha = bf.readLine();
                }
                codigoFonteJTA.setText(conteudoArquivo.toString());
                bf.close();
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Não foi possível encontrar o arquivo selecionado.");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Houve um problema ao tentar abrir o arquivo.");
            }
        }
    }//GEN-LAST:event_carregarJBActionPerformed

    private void salvarJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarJBActionPerformed
        JFileChooser salvaArquivo = new JFileChooser();
        salvaArquivo.setFileFilter(new ExtensionFileFilter());
        salvaArquivo.setAcceptAllFileFilterUsed(false);
        salvaArquivo.setDialogType(JFileChooser.SAVE_DIALOG);
        if (salvaArquivo.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File arquivo = salvaArquivo.getSelectedFile();
            arquivo = new File(arquivo.getAbsolutePath() + ".asm");
            boolean gravar = true;
            if (arquivo.exists()) {
                gravar = JOptionPane.showConfirmDialog(this, 
                        "O arquivo informado já existe, deseja substituir?", "Arquivo existente",  JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;
            }
            if (gravar) {
                try {
                    BufferedWriter bw = new BufferedWriter(new FileWriter(arquivo));
                    bw.write(codigoFonteJTA.getText().replace("\n", "\r\n"));
                    bw.flush();
                    bw.close();
                } catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(this, "Não foi possível encontrar o arquivo selecionado.");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Houve um problema ao tentar abrir o arquivo.");
                }
            } else {
                salvarJBActionPerformed(evt);
            }
        }
    }//GEN-LAST:event_salvarJBActionPerformed

    private void executarJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executarJBActionPerformed
        if (!"".equals(codigoFonteJTA.getText())) {
            CodeCompilerDialog codeCompiler = new CodeCompilerDialog(this);
            codeCompiler.init(this.codigoFonteJTA.getText());
        } else {
            JOptionPane.showMessageDialog(this, "O código do programa deve ser informado.");
        }
    }//GEN-LAST:event_executarJBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceMVM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceMVM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceMVM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceMVM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfaceMVM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton carregarJB;
    private javax.swing.JScrollPane codigoFonteJSP;
    private javax.swing.JTextArea codigoFonteJTA;
    private javax.swing.JButton executarJB;
    private javax.swing.JToolBar ferramentaJTB;
    private javax.swing.JPanel fundoJP;
    private javax.swing.JTextField linhaJTF;
    private javax.swing.JButton salvarJB;
    // End of variables declaration//GEN-END:variables
}
