/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.furb.interfaces;

import br.furb.enumerator.EnumData;
import br.furb.nucleo.MVM;
import br.furb.interfaces.NumberedBorder;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Gabriel Bernardi
 */
public class CodeCompilerDialog extends javax.swing.JDialog {

    private String code;
    
    /**
     * Creates new form CodeCompilerDialog
     */
    public CodeCompilerDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public CodeCompilerDialog() {
    }
    
    public CodeCompilerDialog(Object parent) {
        super((JFrame) parent, true);
        initComponents();
        this.setLocationRelativeTo(null);
        this.codigoFonteJTA.setBorder(new NumberedBorder());
        this.horaJTF.setHorizontalAlignment(horaJTF.CENTER);
        this.startRelogio();
    }
    
    public void startRelogio() {
        final SimpleDateFormat HHmmss = new SimpleDateFormat("HH:mm:ss");
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                horaJTF.setText(HHmmss.format(new Date()));
            }
        };
        new Timer().scheduleAtFixedRate(task, 0, 1000);
        try {
            wait();
        }
        catch (Exception ex)
        {}
    }
    
    public void init(String code){       
        this.code = code;
        this.codigoFonteJTA.setText(code);
        this.setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fundoJP = new javax.swing.JPanel();
        ferramentaJTB = new javax.swing.JToolBar();
        stepJB = new javax.swing.JButton();
        runJB = new javax.swing.JButton();
        stopJB = new javax.swing.JButton();
        codigoFonteJSP = new javax.swing.JScrollPane();
        codigoFonteJTA = new javax.swing.JTextArea();
        linhaJTF = new javax.swing.JTextField();
        registradorJSP = new javax.swing.JScrollPane();
        registradorJTA = new javax.swing.JTextArea();
        stackJSP = new javax.swing.JScrollPane();
        stackJTA = new javax.swing.JTextArea();
        relogioJP = new javax.swing.JPanel();
        horaJTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        fundoJP.setPreferredSize(new java.awt.Dimension(800, 600));
        fundoJP.setLayout(new java.awt.GridBagLayout());

        ferramentaJTB.setFloatable(false);
        ferramentaJTB.setRollover(true);
        ferramentaJTB.setPreferredSize(new java.awt.Dimension(100, 10));

        stepJB.setText("Step");
        stepJB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stepJB.setPreferredSize(new java.awt.Dimension(70, 35));
        stepJB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stepJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepJBActionPerformed(evt);
            }
        });
        ferramentaJTB.add(stepJB);

        runJB.setText("Run");
        runJB.setFocusable(false);
        runJB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runJB.setPreferredSize(new java.awt.Dimension(70, 35));
        runJB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        runJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runJBActionPerformed(evt);
            }
        });
        ferramentaJTB.add(runJB);

        stopJB.setText("Stop");
        stopJB.setFocusable(false);
        stopJB.setPreferredSize(new java.awt.Dimension(70, 35));
        stopJB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopJBActionPerformed(evt);
            }
        });
        ferramentaJTB.add(stopJB);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        fundoJP.add(ferramentaJTB, gridBagConstraints);

        codigoFonteJTA.setColumns(20);
        codigoFonteJTA.setRows(5);
        codigoFonteJTA.setPreferredSize(new java.awt.Dimension(164, 110));
        codigoFonteJSP.setViewportView(codigoFonteJTA);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        fundoJP.add(codigoFonteJSP, gridBagConstraints);

        linhaJTF.setEditable(false);
        linhaJTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 1.0;
        fundoJP.add(linhaJTF, gridBagConstraints);

        registradorJTA.setColumns(20);
        registradorJTA.setRows(5);
        registradorJSP.setViewportView(registradorJTA);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        fundoJP.add(registradorJSP, gridBagConstraints);

        stackJTA.setColumns(20);
        stackJTA.setRows(5);
        stackJSP.setViewportView(stackJTA);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        fundoJP.add(stackJSP, gridBagConstraints);

        relogioJP.setLayout(new java.awt.BorderLayout());

        horaJTF.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        horaJTF.setEnabled(false);
        horaJTF.setPreferredSize(new java.awt.Dimension(50, 20));
        relogioJP.add(horaJTF, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        fundoJP.add(relogioJP, gridBagConstraints);

        getContentPane().add(fundoJP, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stepJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepJBActionPerformed

    }//GEN-LAST:event_stepJBActionPerformed

    private void runJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runJBActionPerformed
        try {
            Map<EnumData, List<String>> datas = MVM.traduzirCodigoFonte(this.code, 0, true);
            this.popularCampos(datas);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Falha na execução do programa.\nErro: " + e.getMessage());
        }
    }//GEN-LAST:event_runJBActionPerformed

    private void stopJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopJBActionPerformed
        
    }//GEN-LAST:event_stopJBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CodeCompilerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CodeCompilerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CodeCompilerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CodeCompilerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CodeCompilerDialog dialog = new CodeCompilerDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane codigoFonteJSP;
    private javax.swing.JTextArea codigoFonteJTA;
    private javax.swing.JToolBar ferramentaJTB;
    private javax.swing.JPanel fundoJP;
    private javax.swing.JTextField horaJTF;
    private javax.swing.JTextField linhaJTF;
    private javax.swing.JScrollPane registradorJSP;
    private javax.swing.JTextArea registradorJTA;
    private javax.swing.JPanel relogioJP;
    private javax.swing.JButton runJB;
    private javax.swing.JScrollPane stackJSP;
    private javax.swing.JTextArea stackJTA;
    private javax.swing.JButton stepJB;
    private javax.swing.JButton stopJB;
    // End of variables declaration//GEN-END:variables

    private void popularCampos(Map<EnumData, List<String>> datas){
        if (datas.get(EnumData.REGISTRADORES) != null){
            for (String reg : datas.get(EnumData.REGISTRADORES)) {
                this.registradorJTA.append(reg + "\n");
            }
        }
        
        if (datas.get(EnumData.STACK) != null){
            for (String stack : datas.get(EnumData.STACK)) {
                this.stackJTA.append(stack + "\n");
            }
        }
        
        if (datas.get(EnumData.OUT) != null){
            for (String out : datas.get(EnumData.OUT)) {
                this.linhaJTF.setText(out);
            }
        }
        
        if (datas.get(EnumData.LOG) != null){
            for (String log : datas.get(EnumData.LOG)) {
//                this.logJTA.append(log + "\n");
            }
        }
    }
}
